{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","api/posts.js","components/Loader/Loader.jsx","components/Comments/Comments.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","selectPostId","selectedPostId","className","map","post","key","id","userId","title","type","onClick","BASE_URL","COMMENTS_URL","sendRequest","path","option","a","fetch","response","json","result","data","getPostComments","postId","then","comments","filter","comment","body","trim","addNewComment","name","email","method","JSON","stringify","NewCommentForm","getComments","useState","setName","setEmail","setBody","onSubmit","event","preventDefault","sendNewComment","placeholder","value","onChange","target","required","getPostDetails","Loader","Comments","commentId","PostDetails","getPost","showedComments","showComments","useEffect","length","App","selectedUser","setSelectedUser","setSelectedPostId","setPosts","user","ReactDOM","render","document","getElementById"],"mappings":"wVAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,eAAxB,OACvB,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBAEVH,EAAMI,KAAI,SAAAC,GAAI,OACZ,wBACEC,IAAKD,EAAKE,GACVJ,UAAU,mBAEV,6BACE,4CAAcE,EAAKG,OAAnB,OACCH,EAAKI,OAGR,4BACEC,KAAK,SACLP,UAAU,2BACVQ,QAAS,WACPT,IAAmBG,EAAKE,GACpBN,EAAaI,EAAKE,IAClBN,EAAa,KAIjBC,IAAmBG,EAAKE,GACpB,QACA,gB,uBChCPK,G,MAAW,kCCElBC,EAAY,UAAMD,EAAN,a,SAEHE,E,gFAAf,WAA2BC,EAAMC,GAAjC,iBAAAC,EAAA,sEACyBC,MAAMH,EAAMC,GADrC,cACQG,EADR,gBAEuBA,EAASC,OAFhC,cAEQC,EAFR,yBAISA,EAAOC,MAJhB,4C,sBAOO,IAAMC,EAAkB,SAAAC,GAAM,OAAIV,EAAYD,GAClDY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAAO,SAAAC,GAAO,OACvCA,EAAQJ,SAAWA,GACdI,EAAQC,MACRD,EAAQC,KAAKC,cASTC,EAAgB,SAAC,GAAD,IAAGP,EAAH,EAAGA,OAAQQ,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,MAAOJ,EAAxB,EAAwBA,KAAxB,OAAmCf,EAC9DD,EAAc,CACZqB,OAAQ,OACRL,KAAMM,KAAKC,UAAU,CACnBZ,SACAQ,OACAC,QACAJ,YCzBOQ,EAAiB,SAAC,GAA6B,IAA3Bb,EAA0B,EAA1BA,OAAQc,EAAkB,EAAlBA,YAAkB,EACjCC,mBAAS,IADwB,mBAClDP,EADkD,KAC5CQ,EAD4C,OAE/BD,mBAAS,IAFsB,mBAElDN,EAFkD,KAE3CQ,EAF2C,OAGjCF,mBAAS,IAHwB,mBAGlDV,EAHkD,KAG5Ca,EAH4C,iDAKzD,sBAAAzB,EAAA,sEACQc,EAAc,CAClBP,SAAQQ,OAAMC,QAAOJ,SAFzB,OAIEN,EAAgBC,GACbC,KAAKa,GAERE,EAAQ,IACRC,EAAS,IACTC,EAAQ,IATV,4CALyD,sBAiBzD,OACE,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBApB6C,mCAqBnDC,IAEF3C,UAAU,kBAEV,yBAAKA,UAAU,cACb,2BACEO,KAAK,OACLsB,KAAK,OACLe,YAAY,YACZ5C,UAAU,wBACV6C,MAAOhB,EACPiB,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXV,EAAQU,EAAOF,QAEjBG,UAAQ,KAIZ,yBAAKhD,UAAU,cACb,2BACEO,KAAK,QACLsB,KAAK,QACLe,YAAY,aACZ5C,UAAU,wBACV6C,MAAOf,EACPgB,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXT,EAASS,EAAOF,QAElBG,UAAQ,KAIZ,yBAAKhD,UAAU,cACb,8BACE6B,KAAK,OACLe,YAAY,oBACZ5C,UAAU,wBACV6C,MAAOnB,EACPoB,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXR,EAAQQ,EAAOF,QAEjBG,UAAQ,KAIZ,4BACEzC,KAAK,SACLP,UAAU,wCAFZ,mB,kDChEN,WAA2BY,GAA3B,iBAAAE,EAAA,sEACyBC,MAAMH,GAD/B,cACQI,EADR,gBAEuBA,EAASC,OAFhC,cAEQC,EAFR,yBAISA,EAAOC,MAJhB,4C,sBAOO,IAAM8B,EAAiB,SAAA5B,GAAM,O,2CAClCV,CAAY,GAAD,OAAIF,EAAJ,kBAAsBY,IAC9BC,MAAK,SAAAJ,GAAM,OAAIA,MCdPgC,G,MAAS,kBACpB,yBAAKlD,UAAU,UACb,yBAAKA,UAAU,uBCDNmD,EAAW,SAAC,GAAD,IAAG5B,EAAH,EAAGA,SAAUY,EAAb,EAAaA,YAAapC,EAA1B,EAA0BA,eAA1B,OACtB,wBAAIC,UAAU,qBAEVuB,EAAStB,KAAI,SAAAwB,GAAO,OAClB,wBACEtB,IAAKsB,EAAQrB,GACbJ,UAAU,0BAEV,4BACEO,KAAK,SACLP,UAAU,oCACVQ,QAAO,sBAAE,sBAAAM,EAAA,sEJGQsC,EIFK3B,EAAQrB,GJEAO,EAAY,GAAD,OAChDD,EADgD,YAChC0C,GAAa,CAC9BrB,OAAQ,WILS,OAEPX,EAAgBrB,GACbuB,KAAKa,GAHD,iCJGQ,IAAAiB,IIHR,QAHX,KAWA,2BAAI3B,EAAQC,YCbT2B,EAAc,SAAC,GAAwB,IAAtBtD,EAAqB,EAArBA,eAAqB,EACzBqC,mBAAS,MADgB,mBAC1ClC,EAD0C,KACpCoD,EADoC,OAEVlB,oBAAS,GAFC,mBAE1CmB,EAF0C,KAE1BC,EAF0B,OAGjBpB,mBAAS,MAHQ,mBAG1Cb,EAH0C,KAGhCY,EAHgC,KAajD,OARAsB,qBAAU,WACRR,EAAelD,GACZuB,KAAKgC,GAERlC,EAAgBrB,GACbuB,KAAKa,KACP,CAACpC,IAECG,EAQH,yBAAKF,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,4BAAKE,EAAKI,OACV,2BAAIJ,EAAKwB,OAGX,6BAAS1B,UAAU,0BAEduB,GAAgC,IAApBA,EAASmC,QAElB,oCACE,4BACEnD,KAAK,SACLP,UAAU,SACVQ,QAAS,WACPgD,GAAcD,KAJlB,UAOOA,EAA0B,OAA3B,OAPN,8BAQEhC,EAASmC,OARX,eAWGH,GAEC,kBAAC,EAAD,CACEhC,SAAUA,EACVY,YAAaA,EACbpC,eAAgBA,MAShC,iCACE,yBAAKC,UAAU,6BACb,kBAAC,EAAD,CACEqB,OAAQtB,EACRoC,YAAaA,OAhDnB,kBAAC,EAAD,OCiDSwB,EAlEH,WAAO,IAAD,EACwBvB,mBAAS,GADjC,mBACTwB,EADS,KACKC,EADL,OAE4BzB,mBAAS,GAFrC,mBAETrC,EAFS,KAEO+D,EAFP,OAGU1B,mBAAS,MAHnB,mBAGTvC,EAHS,KAGFkE,EAHE,KAUhB,OALAN,qBAAU,WJXgB,IAAApD,KIYXuD,EJZqB7C,MAAM,GAAD,OAAIN,EAAJ,WACxCa,MAAK,SAAAN,GAAQ,OAAIA,EAASC,UAC1BK,MAAK,SAAA0C,GAAI,OAAgB,IAAX3D,EACX2D,EAAK7C,KACL6C,EAAK7C,KAAKK,QAAO,SAAAtB,GAAI,OAAIA,EAAKG,SAAWA,SISxCiB,KAAKyC,KACP,CAACH,EAAc7D,IAGhB,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACV8C,SAAU,SAACL,GAAW,IACZI,EAAUJ,EAAMM,OAAhBF,MAERgB,GAAiBhB,KAGnB,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,oBAKN,0BAAM7C,UAAU,aACd,yBAAKA,UAAU,gBAEVH,EAGG,kBAAC,EAAD,CACEA,MAAOA,EACPC,aAAcgE,EACd/D,eAAgBA,IALjB,kBAAC,EAAD,OAWT,yBAAKC,UAAU,gBAEVD,EAEG,kBAAC,EAAD,CAAaA,eAAgBA,IAD7B,oDC5DhBkE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.50cf4544.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, selectPostId, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {\n        posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]:`}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                selectedPostId !== post.id\n                  ? selectPostId(post.id)\n                  : selectPostId(0);\n              }}\n            >\n              {\n                selectedPostId === post.id\n                  ? 'Close'\n                  : 'Open'\n              }\n            </button>\n          </li>\n        ))\n      }\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nconst COMMENTS_URL = `${BASE_URL}/comments`;\n\nasync function sendRequest(path, option) {\n  const response = await fetch(path, option);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const getPostComments = postId => sendRequest(COMMENTS_URL)\n  .then(comments => comments.filter(comment => (\n    comment.postId === postId\n      && comment.body\n      && comment.body.trim()\n  )));\n\nexport const deleteComment = commentId => sendRequest(\n  `${COMMENTS_URL}/${commentId}`, {\n    method: 'DELETE',\n  },\n);\n\nexport const addNewComment = ({ postId, name, email, body }) => sendRequest(\n  COMMENTS_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  },\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nimport { getPostComments, addNewComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId, getComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  async function sendNewComment() {\n    await addNewComment({\n      postId, name, email, body,\n    });\n    getPostComments(postId)\n      .then(getComments);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  }\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        sendNewComment();\n      }}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => {\n            setName(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => {\n            setBody(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  getComments: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const GetUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then(user => (userId === 0\n    ? user.data\n    : user.data.filter(post => post.userId === userId)));\n\nasync function sendRequest(path) {\n  const response = await fetch(path);\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const getPostDetails = postId => (\n  sendRequest(`${BASE_URL}/posts/${postId}`)\n    .then(result => result)\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\nexport const Comments = ({ comments, getComments, selectedPostId }) => (\n  <ul className=\"PostDetails__list\">\n    {\n      comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={async() => {\n              await deleteComment(comment.id);\n              getPostComments(selectedPostId)\n                .then(getComments);\n            }}\n          >\n            X\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))\n    }\n  </ul>\n);\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getComments: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport { Comments } from '../Comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, getPost] = useState(null);\n  const [showedComments, showComments] = useState(true);\n  const [comments, getComments] = useState(null);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(getPost);\n\n    getPostComments(selectedPostId)\n      .then(getComments);\n  }, [selectedPostId]);\n\n  if (!post) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {\n          !comments || comments.length === 0\n            || (\n              <>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => {\n                    showComments(!showedComments);\n                  }}\n                >\n                  {`${!showedComments ? `Show` : 'Hide'} \n                ${comments.length} comments`}\n                </button>\n                {\n                  !showedComments\n                  || (\n                    <Comments\n                      comments={comments}\n                      getComments={getComments}\n                      selectedPostId={selectedPostId}\n                    />\n                  )\n                }\n              </>\n            )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { GetUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [posts, setPosts] = useState(null);\n\n  useEffect(() => {\n    GetUserPosts(selectedUser)\n      .then(setPosts);\n  }, [selectedUser, selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setSelectedUser(+value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {\n            !posts\n              ? (<Loader />)\n              : (\n                <PostsList\n                  posts={posts}\n                  selectPostId={setSelectedPostId}\n                  selectedPostId={selectedPostId}\n                />\n              )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {\n            !selectedPostId\n              ? <h2>No selected post</h2>\n              : <PostDetails selectedPostId={selectedPostId} />\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}